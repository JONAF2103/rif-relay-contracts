#!/bin/bash

TOKEN_ADDRESSES=$1
NETWORK_NAME=$2

if [ "${TOKEN_ADDRESSES}" == "" ]; then
        echo "You need to specify at least one token address."
        exit 1
fi

if [ "${NETWORK_NAME}" == "" ]; then
        NETWORK_NAME="regtest"
fi

cat > allowTokens.js << EOF

module.exports = async function( ) {
  const contractAddresses = require('./contract-addresses.json');
  const smartWalletDeployVerifierAbi = require("./build/contracts/DeployVerifier.json").abi;
  const customSmartWalletDeployVerifierAbi = require("./build/contracts/CustomSmartWalletDeployVerifier.json").abi;
  const relayVerifierAbi = require("./build/contracts/RelayVerifier.json").abi;

  const smartWalletDeployVerifier = await new web3.eth.Contract(smartWalletDeployVerifierAbi, contractAddresses["${NETWORK_NAME}"].smartWalletDeployVerifier);
  const smartWalletRelayVerifier = await new web3.eth.Contract(relayVerifierAbi, contractAddresses["${NETWORK_NAME}"].smartWalletRelayVerifier);
  const customSmartWalletDeployVerifier = await new web3.eth.Contract(customSmartWalletDeployVerifierAbi, contractAddresses["${NETWORK_NAME}"].customSmartWalletDeployVerifier);
  const customSmartWalletRelayVerifier = await new web3.eth.Contract(relayVerifierAbi, contractAddresses["${NETWORK_NAME}"].customSmartWalletRelayVerifier);

  const tokenAddresses = '${TOKEN_ADDRESSES}'.split(',');

  const accounts = await web3.eth.getAccounts();

  try {
    for (let tokenAddress of tokenAddresses) {
      try {
        await smartWalletDeployVerifier.methods.acceptToken(tokenAddress).send({from: accounts[0]});
      } catch (error) {
        console.error("Error adding token with address " + tokenAddress + " to allowed tokens on smart wallet deploy verifier", error);
        throw error;
      }
      try {
        await smartWalletRelayVerifier.methods.acceptToken(tokenAddress).send({from: accounts[0]});
      } catch (error) {
        console.error("Error adding token with address " + tokenAddress + " to allowed tokens on smart wallet relay verifier", error);
        throw error;
      }
      try {
        await customSmartWalletDeployVerifier.methods.acceptToken(tokenAddress).send({from: accounts[0]});
      } catch (error) {
        console.error("Error adding token with address " + tokenAddress + " to allowed tokens on custom smart deploy verifier", error);
        throw error;
      }
      try {
        await customSmartWalletRelayVerifier.methods.acceptToken(tokenAddress).send({from: accounts[0]});
      } catch (error) {
        console.error("Error adding token with address " + tokenAddress + " to allowed tokens on custom smart wallet relay verifier", error);
        throw error;
      }
    }
  } catch (error) {
    console.error(error);
    console.error("Failed to allow tokens");
    return;
  }
  console.log("Tokens allowed successfully!");
}
EOF

truffle exec --network ${NETWORK_NAME} allowTokens.js

rm allowTokens.js
