#!/bin/bash

NETWORK_NAME=$1

if [ "${NETWORK_NAME}" == "" ]; then
        NETWORK_NAME="regtest"
fi

cat > allowTokens.js << EOF
module.exports = async function(callback) {
  const contractAddresses = require('./contract-addresses.json');
  const smartWalletDeployVerifierAbi = require("./build/contracts/DeployVerifier.json").abi;
  const customSmartWalletDeployVerifierAbi = require("./build/contracts/CustomSmartWalletDeployVerifier.json").abi;
  const relayVerifierAbi = require("./build/contracts/RelayVerifier.json").abi;

  const smartWalletDeployVerifier = await new web3.eth.Contract(smartWalletDeployVerifierAbi, contractAddresses["${NETWORK_NAME}"].smartWalletDeployVerifier);
  const smartWalletRelayVerifier = await new web3.eth.Contract(relayVerifierAbi, contractAddresses["${NETWORK_NAME}"].smartWalletRelayVerifier);
  const customSmartWalletDeployVerifier = await new web3.eth.Contract(customSmartWalletDeployVerifierAbi, contractAddresses["${NETWORK_NAME}"].customSmartWalletDeployVerifier);
  const customSmartWalletRelayVerifier = await new web3.eth.Contract(relayVerifierAbi, contractAddresses["${NETWORK_NAME}"].customSmartWalletRelayVerifier);

  const accounts = await web3.eth.getAccounts();

  let smartWalletDeployVerifierTokens;
  let smartWalletRelayVerifierTokens;
  let customSmartWalletDeployVerifierTokens;
  let customSmartWalletRelayVerifierTokens;

  try {
    smartWalletDeployVerifierTokens = await smartWalletDeployVerifier.methods.getAcceptedTokens().call({from: accounts[0]});
  } catch (error) {
    console.error("Error getting allowed tokens for smart wallet deploy verifier", error);
  }

  try {
    smartWalletRelayVerifierTokens = await smartWalletRelayVerifier.methods.getAcceptedTokens().call({from: accounts[0]});
  } catch (error) {
    console.error("Error getting allowed tokens for smart wallet relay verifier", error);
  }

  try {
    customSmartWalletDeployVerifierTokens = await customSmartWalletDeployVerifier.methods.getAcceptedTokens().call({from: accounts[0]});
  } catch (error) {
    console.error("Error getting allowed tokens for custom smart deploy verifier", error);
  }

  try {
    customSmartWalletRelayVerifierTokens = await customSmartWalletRelayVerifier.methods.getAcceptedTokens().call({from: accounts[0]});
  } catch (error) {
    console.error("Error getting allowed tokens for custom smart wallet relay verifier", error);
  }

  console.log('Smart Wallet Deploy Verifier', smartWalletDeployVerifierTokens);
  console.log('Smart Wallet Relay Verifier', smartWalletRelayVerifierTokens);
  console.log('Custom Smart Wallet Deploy Verifier', customSmartWalletDeployVerifierTokens);
  console.log('Custom Smart Wallet Relay Verifier', customSmartWalletRelayVerifierTokens);
}
EOF

truffle exec --network ${NETWORK_NAME} allowTokens.js

rm allowTokens.js
